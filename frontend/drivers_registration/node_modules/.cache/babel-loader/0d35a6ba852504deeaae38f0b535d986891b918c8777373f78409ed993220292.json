{"ast":null,"code":"const updateUserProfile = async (req, res) => {\n  try {\n    const userId = req.params.id;\n    const user = await Users.findById(userId);\n    if (!user) {\n      return res.status(404).json({\n        success: false,\n        message: 'User not found.'\n      });\n    }\n    let avatarUrl = null;\n    if (req.files && req.files.avatar) {\n      // If avatar file is uploaded\n      const {\n        avatar\n      } = req.files;\n      const uploadedAvatar = await cloudinary.uploader.upload(avatar.path, {\n        folder: 'avatars'\n      });\n      if (!uploadedAvatar || !uploadedAvatar.secure_url) {\n        return res.status(500).json({\n          success: false,\n          message: 'Failed to upload avatar to Cloudinary'\n        });\n      }\n      avatarUrl = uploadedAvatar.secure_url;\n    }\n\n    // Update user profile with new data\n    user.firstName = req.body.firstName || user.firstName;\n    user.lastName = req.body.lastName || user.lastName;\n    user.phoneNo = req.body.phoneNo || user.phoneNo;\n    if (avatarUrl) {\n      user.avatar = avatarUrl;\n    }\n\n    // Save the updated user profile\n    await user.save();\n    res.status(200).json({\n      success: true,\n      message: 'User profile updated successfully.',\n      user: user\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({\n      success: false,\n      message: 'Server Error'\n    });\n  }\n};","map":{"version":3,"names":["updateUserProfile","req","res","userId","params","id","user","Users","findById","status","json","success","message","avatarUrl","files","avatar","uploadedAvatar","cloudinary","uploader","upload","path","folder","secure_url","firstName","body","lastName","phoneNo","save","error","console"],"sources":["C:/Users/PC/Desktop/WEB_/frontend/drivers_registration/src/pages/Profile.jsx"],"sourcesContent":["const updateUserProfile = async (req, res) => {\r\n  try {\r\n    const userId = req.params.id;\r\n    const user = await Users.findById(userId);\r\n    if (!user) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'User not found.',\r\n      });\r\n    }\r\n\r\n    let avatarUrl = null;\r\n    if (req.files && req.files.avatar) {\r\n      // If avatar file is uploaded\r\n      const { avatar } = req.files;\r\n      const uploadedAvatar = await cloudinary.uploader.upload(avatar.path, { folder: 'avatars' });\r\n      if (!uploadedAvatar || !uploadedAvatar.secure_url) {\r\n        return res.status(500).json({\r\n          success: false,\r\n          message: 'Failed to upload avatar to Cloudinary',\r\n        });\r\n      }\r\n      avatarUrl = uploadedAvatar.secure_url;\r\n    }\r\n\r\n    // Update user profile with new data\r\n    user.firstName = req.body.firstName || user.firstName;\r\n    user.lastName = req.body.lastName || user.lastName;\r\n    user.phoneNo = req.body.phoneNo || user.phoneNo;\r\n    if (avatarUrl) {\r\n      user.avatar = avatarUrl;\r\n    }\r\n\r\n    // Save the updated user profile\r\n    await user.save();\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'User profile updated successfully.',\r\n      user: user,\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Server Error',\r\n    });\r\n  }\r\n};"],"mappings":"AAAA,MAAMA,iBAAiB,GAAG,MAAAA,CAAOC,GAAG,EAAEC,GAAG,KAAK;EAC5C,IAAI;IACF,MAAMC,MAAM,GAAGF,GAAG,CAACG,MAAM,CAACC,EAAE;IAC5B,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAACC,QAAQ,CAACL,MAAM,CAAC;IACzC,IAAI,CAACG,IAAI,EAAE;MACT,OAAOJ,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;IAEA,IAAIC,SAAS,GAAG,IAAI;IACpB,IAAIZ,GAAG,CAACa,KAAK,IAAIb,GAAG,CAACa,KAAK,CAACC,MAAM,EAAE;MACjC;MACA,MAAM;QAAEA;MAAO,CAAC,GAAGd,GAAG,CAACa,KAAK;MAC5B,MAAME,cAAc,GAAG,MAAMC,UAAU,CAACC,QAAQ,CAACC,MAAM,CAACJ,MAAM,CAACK,IAAI,EAAE;QAAEC,MAAM,EAAE;MAAU,CAAC,CAAC;MAC3F,IAAI,CAACL,cAAc,IAAI,CAACA,cAAc,CAACM,UAAU,EAAE;QACjD,OAAOpB,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAC1BC,OAAO,EAAE,KAAK;UACdC,OAAO,EAAE;QACX,CAAC,CAAC;MACJ;MACAC,SAAS,GAAGG,cAAc,CAACM,UAAU;IACvC;;IAEA;IACAhB,IAAI,CAACiB,SAAS,GAAGtB,GAAG,CAACuB,IAAI,CAACD,SAAS,IAAIjB,IAAI,CAACiB,SAAS;IACrDjB,IAAI,CAACmB,QAAQ,GAAGxB,GAAG,CAACuB,IAAI,CAACC,QAAQ,IAAInB,IAAI,CAACmB,QAAQ;IAClDnB,IAAI,CAACoB,OAAO,GAAGzB,GAAG,CAACuB,IAAI,CAACE,OAAO,IAAIpB,IAAI,CAACoB,OAAO;IAC/C,IAAIb,SAAS,EAAE;MACbP,IAAI,CAACS,MAAM,GAAGF,SAAS;IACzB;;IAEA;IACA,MAAMP,IAAI,CAACqB,IAAI,CAAC,CAAC;IAEjBzB,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBC,OAAO,EAAE,IAAI;MACbC,OAAO,EAAE,oCAAoC;MAC7CN,IAAI,EAAEA;IACR,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOsB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpB1B,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdC,OAAO,EAAE;IACX,CAAC,CAAC;EACJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}